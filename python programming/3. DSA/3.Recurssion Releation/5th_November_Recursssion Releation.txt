1. Find the value of T(2) for the recurrence relation T(n) = 3T(n-1) + 12n, given that T(0)=5.

sol:-
                T(n) = 3T(n-1) + 12n
                n=2, T(0)=5

                =>T(2) = 3T(2-1) + 122
                => T(2) = 3T(1) + 122
                => T(2) = 3[3T(1-1)+121] + 24
                => T(2) = 3[3T(0)+121] + 24
                => T(2) = 3[35+121] + 24
                => T(2) = 3[15+12] + 24
                => T(2) = 3*27 + 24
                => T(2) = 81 + 24
                => T(2) = 105



2. Given a recurrence relation, solve it using the substitution method:

a. T(n) = T(n-1) + c

sol:-

                    let, T(1) = b
                    T(n) = T(n-1) + c   ----------(1)
                    =>T(n-1) = T(n-1-1) + c
                    =>T(n-1) = T(n-2) + c   --------(2)

                    by substitute the value of 2 in 1 ,
                    =>T(n) = T(n-2) + 2c
                    Then,
                    =>T(n) = T(n-3) + 3c

                    After k times,
                    T(n) = T(n-k) + k*c
                    if n-k=1, k=(n-1)
                    then,
                    T(n) = T(n-n+1) + (n-1)c
                    T(n) = T(1) + (n-1)c
                    T(n) = b + (n-1)c
                 
                  ------------O(n)



b. T(n) = 2T(n/2) + n

sol:-

                    let, T(1) = b
                    T(n) = 2T(n/2) + n   ----------(1)
                    =>T(n/2) = 2T(n/4) + n/2  -------(2)

                    by substitute the value of 2 in 1 ,
                    =>T(n) = 4T(n/4) + 2n
                    Then,
                    =>T(n) = 2^3[T(n/2^3)] + 3n

                    After k times,
                    T(n) = 2^k[T(n/2^k)] + k*n

                    if n/2^k=1, n=2^k
                    log(n) = klog2
                    k = log(n)
                    then,
                    T(n) = nT(1) + nlog(n)
                    T(n) = nb + nlog(n)

                ---------------O(nlogn)


c. T(n) = 2T(n/2) + c

sol:-

                    let, T(1) = b
                    T(n) = 2T(n/2) + c   ----------(1)
                    =>T(n/2) = 2T(n/4) + c  -------(2)

                    by substitute the value of 2 in 1 ,
                    =>T(n) = 4T(n/4) + 2c
                    Then,
                    =>T(n) = 2^3[T(n/2^3)] + 3c

                    After k times,
                    T(n) = 2^k[T(n/2^k)] + k.c

                    if n/2^k=1, n=2^k
                    log(n) = klog2,
                    k = log(n)
                    then,
                    T(n) = nT(1) + log(n).c
                    T(n) = nb + log(n).c
                    
                    -------------O(log(n))


d. T(n) = T(n/2) + c

sol:-

                    let, T(1) = b
                    T(n) = T(n/2) + c   ----------(1)
                    =>T(n/2) = T(n/4) + c  -------(2)

                    by substitute the value of 2 in 1 ,
                    =>T(n) = T(n/4) + 2c
                    Then,
                    =>T(n) = [T(n/2^3)] + 3c

                    After k times,
                    T(n) = [T(n/2^k)] + k.c

                    if n/2^k=1, n=2^k
                    log(n) = klog2,
                    k = log(n)
                    then,
                    T(n) = T(1) + log(n).c
                    T(n) = b + log(n).c

                    ---------O(logn)



3. Given a rec%rrence relation, solve it %sing the rec%rsive tree approach:
a. T(n) = 2T(n-1) +1

                    by recursive tree we get to know,

                    2^0 + 2^1 + 2^2 + 2^3 + ------------ +2^k = S
                    it's GP series,
                    so,  sum of GP series Sn = a(r^n -1)/(r – 1), if r > 1
                    here, a=1, r=2, n=k
                            Sn = 1(2^n-1)/(2– 1)
                            = 2^n -1
                          
                     So,T(n) = 2T(n-1) +1-----------> O(2^n)

b. T(n) = 2T(n/2) + n
                    
                    by recursive tree we get to know,
                       
                       T(n) = 2T(n/2) + n -------------> nk

                    
                    Assume, n/2^k = 1,
                            n = 2^k
                            log(n)=klog2
                            k=log(n)

                        nk = n.log(n)

                    So, T(n) = 2T(n/2) + n ---------->  O(nlog(n))


